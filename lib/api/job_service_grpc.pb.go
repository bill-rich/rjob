// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobsClient is the client API for Jobs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobsClient interface {
	Start(ctx context.Context, in *StartJobInput, opts ...grpc.CallOption) (*StartJobResponse, error)
	Stop(ctx context.Context, in *StopJobInput, opts ...grpc.CallOption) (*StopJobResponse, error)
	Status(ctx context.Context, in *StatusInput, opts ...grpc.CallOption) (*StatusResponse, error)
	Monitor(ctx context.Context, in *MonitorJobInput, opts ...grpc.CallOption) (Jobs_MonitorClient, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListJobsResponse, error)
}

type jobsClient struct {
	cc grpc.ClientConnInterface
}

func NewJobsClient(cc grpc.ClientConnInterface) JobsClient {
	return &jobsClient{cc}
}

func (c *jobsClient) Start(ctx context.Context, in *StartJobInput, opts ...grpc.CallOption) (*StartJobResponse, error) {
	out := new(StartJobResponse)
	err := c.cc.Invoke(ctx, "/Jobs/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) Stop(ctx context.Context, in *StopJobInput, opts ...grpc.CallOption) (*StopJobResponse, error) {
	out := new(StopJobResponse)
	err := c.cc.Invoke(ctx, "/Jobs/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) Status(ctx context.Context, in *StatusInput, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/Jobs/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) Monitor(ctx context.Context, in *MonitorJobInput, opts ...grpc.CallOption) (Jobs_MonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &Jobs_ServiceDesc.Streams[0], "/Jobs/Monitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobsMonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Jobs_MonitorClient interface {
	Recv() (*MonitorJobResponse, error)
	grpc.ClientStream
}

type jobsMonitorClient struct {
	grpc.ClientStream
}

func (x *jobsMonitorClient) Recv() (*MonitorJobResponse, error) {
	m := new(MonitorJobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobsClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, "/Jobs/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobsServer is the server API for Jobs service.
// All implementations must embed UnimplementedJobsServer
// for forward compatibility
type JobsServer interface {
	Start(context.Context, *StartJobInput) (*StartJobResponse, error)
	Stop(context.Context, *StopJobInput) (*StopJobResponse, error)
	Status(context.Context, *StatusInput) (*StatusResponse, error)
	Monitor(*MonitorJobInput, Jobs_MonitorServer) error
	List(context.Context, *Empty) (*ListJobsResponse, error)
	mustEmbedUnimplementedJobsServer()
}

// UnimplementedJobsServer must be embedded to have forward compatible implementations.
type UnimplementedJobsServer struct {
}

func (UnimplementedJobsServer) Start(context.Context, *StartJobInput) (*StartJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedJobsServer) Stop(context.Context, *StopJobInput) (*StopJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedJobsServer) Status(context.Context, *StatusInput) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedJobsServer) Monitor(*MonitorJobInput, Jobs_MonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}
func (UnimplementedJobsServer) List(context.Context, *Empty) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedJobsServer) mustEmbedUnimplementedJobsServer() {}

// UnsafeJobsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobsServer will
// result in compilation errors.
type UnsafeJobsServer interface {
	mustEmbedUnimplementedJobsServer()
}

func RegisterJobsServer(s grpc.ServiceRegistrar, srv JobsServer) {
	s.RegisterService(&Jobs_ServiceDesc, srv)
}

func _Jobs_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Jobs/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).Start(ctx, req.(*StartJobInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopJobInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Jobs/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).Stop(ctx, req.(*StopJobInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Jobs/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).Status(ctx, req.(*StatusInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_Monitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorJobInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsServer).Monitor(m, &jobsMonitorServer{stream})
}

type Jobs_MonitorServer interface {
	Send(*MonitorJobResponse) error
	grpc.ServerStream
}

type jobsMonitorServer struct {
	grpc.ServerStream
}

func (x *jobsMonitorServer) Send(m *MonitorJobResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Jobs_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Jobs/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Jobs_ServiceDesc is the grpc.ServiceDesc for Jobs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jobs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Jobs",
	HandlerType: (*JobsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Jobs_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Jobs_Stop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Jobs_Status_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Jobs_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monitor",
			Handler:       _Jobs_Monitor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "job_service.proto",
}
